<?xml version="1.0" encoding="UTF-8"?><!--xml声明-->
<!--1. xmlns：
            1.1 xml namespace 用于说明beans标签的命名空间（因为beans标签下还包含了bean等标签，所以其实就是这个文档的命名空间了）。
            不加冒号的话，就是默认的命名空间，加了冒号的就是这里面特定的标签的命名空间。
            1.2 命名空间就是为了说明这个标签来自于哪，因为xml嘛，是一种用于沟通的标记语言，大家都可以设置自己的标签，
            所以就要说清楚这个标签是哪的，用唯一的命名空间来唯一化。
    2.xsi:schemaLocation:
            2.1 用于说明XSD在哪，这是一一匹配的，第一行说明是哪个xml，第二说明这个xml对应的XML结构也就是XSD在哪，
            这是一个网址，但是spring提前把对应的文件下载下来了，放在某个jar包里（有一一对应信息说明放在哪个jar包里的哪个位置，key为xsd的网址）
            ，然后在需要文件的时候去找就好了。（这样就不需要在运行的时候去需要网络了）
            (其实用网址主要是为了让这个xsd唯一吧，一个namespace对应一个xsd撒，那当然就都要唯一了)
            2.2 XSD（XML Schema Definition）用来说明XML的结构，通过XSD就可以校验这个XML文件的格式是否正确。
            -->
<!--suppress SpringFacetInspection -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/aop
                        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--生命bean：id、class、[属性]-->
    <bean id="student123"
          class="io.kimmking.spring01.Student">
        <property name="id" value="123"/>
        <property name="name" value="KK123"/>
    </bean>
    <bean id="student100"
          class="io.kimmking.spring01.Student">
        <property name="id" value="100"/>
        <property name="name" value="KK100"/>
    </bean>

    <bean id="class1" class="io.kimmking.spring02.Klass">
        <property name="students">
            <list>
                <ref bean="student100"/>
                <ref bean="student123"/>
                <!--                <bean class="io.kimmking.spring01.Student">-->
                <!--                    <property name="name" value="qq" />-->
                <!--                    <property name="id" value="001" /> -->
                <!--                </bean>-->
            </list>
        </property>
    </bean>

    <!--开启注解扫描-->
    <context:component-scan base-package="io.kimmking.spring02"/>

    <!--aop：把切面配置为bean-->
    <bean id="aop1" class="io.kimmking.spring02.Aop1"/>

    <bean id="aop2" class="io.kimmking.spring02.Aop2"/>
    <!-- proxy-target-class="true" 会使得接口不走JDK动态代理的方式，而是走CGLib字节码增强的方式-->
    <!--    <aop:aspectj-autoproxy proxy-target-class="true" />-->
    <!--开启自动代理，这样就会自动的去扫描注解，所以这是给注解的方式用的-->
    <aop:aspectj-autoproxy/>
    <!--aop：spring aop的实现是动态代理，那么自然是需要说明原始类和代理类 对应的方法的-->
    <!--XML 配置的方式里也有proxy-target-class="true"-->
    <aop:config>
        <!--aop：配置切点（就是原始类的方法）-->
        <aop:pointcut expression="execution(* io.kimmking.aop.*.*(..))" id="p1"/> <!--切点-->
        <!--aop：配置切面（就是代理类的方法），以及切面如何执行-->
        <!--aspect：ref和bean的id进行匹配，用于找到对应的切面代码-->
        <aop:aspect ref="aop1"> <!--切面 -->
            <!--around 对切面的执行方式进行说明：环绕；pointcut-ref用于和切点匹配-->
            <aop:around method="around" pointcut-ref="p1"/>
            <!--前置-->
            <aop:before method="startTransaction" pointcut-ref="p1"/> <!--前置通知-->
            <!--后置-->
            <aop:after-returning method="commitTransaction" pointcut-ref="p1"/> <!--后置通知-->
        </aop:aspect>
    </aop:config>

    <!--    <context:annotation-config />-->
    <!--    -->
    <bean id="school" class="io.kimmking.spring02.School"/>


</beans>